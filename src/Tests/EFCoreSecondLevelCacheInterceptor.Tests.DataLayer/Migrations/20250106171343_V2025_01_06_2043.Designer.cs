// <auto-generated />
using System;
using EFCoreSecondLevelCacheInterceptor.Tests.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250106171343_V2025_01_06_2043")]
    partial class V2025_01_06_2043
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            Url = "https://site1.com"
                        },
                        new
                        {
                            BlogId = 2,
                            Url = "https://site2.com"
                        });
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.BlogData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BlogData");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.DateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("AddDateValue")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan?>("RelativeAddTimeValue")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("RelativeUpdateTimeValue")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("UpdateDateValue")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("DateTypes");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.EngineVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("EngineVersions");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("post_type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("post_type").HasValue("post_base");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            Title = "Post1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 1,
                            Title = "Post2",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductName")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IsActive = false,
                            Notes = "Notes ...",
                            ProductName = "Product4",
                            ProductNumber = "004",
                            UserId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            IsActive = true,
                            Notes = "Notes ...",
                            ProductName = "Product1",
                            ProductNumber = "001",
                            UserId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            IsActive = true,
                            Notes = "Notes ...",
                            ProductName = "Product2",
                            ProductNumber = "002",
                            UserId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            IsActive = true,
                            Notes = "Notes ...",
                            ProductName = "Product3",
                            ProductNumber = "003",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tag4"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tag1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tag2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tag3"
                        });
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.TagProduct", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("ProductProductId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ProductProductId");

                    b.HasIndex("ProductProductId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            ProductProductId = 1
                        },
                        new
                        {
                            TagId = 2,
                            ProductProductId = 2
                        },
                        new
                        {
                            TagId = 3,
                            ProductProductId = 3
                        },
                        new
                        {
                            TagId = 4,
                            ProductProductId = 4
                        });
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ByteArrayValue")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("ByteValue")
                        .HasColumnType("tinyint");

                    b.Property<string>("CharValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTimeOffset?>("DateTimeOffsetValue")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DecimalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("float");

                    b.Property<float>("FloatValue")
                        .HasColumnType("real");

                    b.Property<Guid>("GuidValue")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<short>("ShortValue")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan?>("TimeSpanValue")
                        .HasColumnType("time");

                    b.Property<long>("UintValue")
                        .HasColumnType("bigint");

                    b.Property<decimal>("UlongValue")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("UshortValue")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ByteArrayValue = new byte[] { 1, 2 },
                            ByteValue = (byte)1,
                            CharValue = "C",
                            DecimalValue = 1.1m,
                            DoubleValue = 1.3,
                            FloatValue = 1.2f,
                            GuidValue = new Guid("236bbe40-b861-433c-8789-b152a99cfe3e"),
                            IsActive = true,
                            Name = "User1",
                            Points = 1000L,
                            ShortValue = (short)2,
                            UintValue = 1L,
                            UlongValue = 1m,
                            UserStatus = 0,
                            UshortValue = 1m
                        });
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Page", b =>
                {
                    b.HasBaseType("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Post");

                    b.HasDiscriminator().HasValue("post_page");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.EngineVersion", b =>
                {
                    b.OwnsOne("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.EngineProductVersion", "Commercial", b1 =>
                        {
                            b1.Property<int>("EngineVersionId")
                                .HasColumnType("int");

                            b1.Property<int>("Major")
                                .HasColumnType("int");

                            b1.Property<int>("Minor")
                                .HasColumnType("int");

                            b1.Property<int>("Patch")
                                .HasColumnType("int");

                            b1.Property<int>("Revision")
                                .HasColumnType("int");

                            b1.HasKey("EngineVersionId");

                            b1.ToTable("EngineVersions");

                            b1.WithOwner()
                                .HasForeignKey("EngineVersionId");
                        });

                    b.OwnsOne("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.EngineProductVersion", "Retail", b1 =>
                        {
                            b1.Property<int>("EngineVersionId")
                                .HasColumnType("int");

                            b1.Property<int>("Major")
                                .HasColumnType("int");

                            b1.Property<int>("Minor")
                                .HasColumnType("int");

                            b1.Property<int>("Patch")
                                .HasColumnType("int");

                            b1.Property<int>("Revision")
                                .HasColumnType("int");

                            b1.HasKey("EngineVersionId");

                            b1.ToTable("EngineVersions");

                            b1.WithOwner()
                                .HasForeignKey("EngineVersionId");
                        });

                    b.Navigation("Commercial");

                    b.Navigation("Retail");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Post", b =>
                {
                    b.HasOne("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Product", b =>
                {
                    b.HasOne("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.TagProduct", b =>
                {
                    b.HasOne("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.Tag", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("EFCoreSecondLevelCacheInterceptor.Tests.DataLayer.Entities.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
